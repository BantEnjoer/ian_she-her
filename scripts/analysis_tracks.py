import os
import sys
import time
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
from collections import Counter
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ NLTK (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–∫–∞—á–∞–Ω—ã)
nltk.download('punkt')
nltk.download('stopwords')

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Spotify API
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Genius API
import lyricsgenius

# –ü–æ–ª—É—á–µ–Ω–∏–µ API‚Äë–∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SPOTIFY_CLIENT_ID = os.getenv("SPOTIPY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIPY_CLIENT_SECRET")
GENIUS_ACCESS_TOKEN = os.getenv("GENIUS_ACCESS_TOKEN")

if not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
    print("–û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SPOTIPY_CLIENT_ID –∏ SPOTIPY_CLIENT_SECRET.")
    sys.exit(1)
if not GENIUS_ACCESS_TOKEN:
    print("–û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GENIUS_ACCESS_TOKEN.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Spotify
spotify_credentials = SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID,
                                               client_secret=SPOTIFY_CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager=spotify_credentials)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Genius
genius = lyricsgenius.Genius(GENIUS_ACCESS_TOKEN, timeout=15, retries=3)
genius.skip_non_songs = True
genius.excluded_terms = ["(Remix)", "(live)"]

def download_album_data(album_name="Goodbye Horses", artist_name="ian"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–æ–≤ –∞–ª—å–±–æ–º–∞ –∏–∑ Spotify –∏ —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω —Å Genius.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
      - track_name
      - duration (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
      - popularity
      - lyrics
    """
    # –ü–æ–∏—Å–∫ –∞–ª—å–±–æ–º–∞
    query = f"album:{album_name} artist:{artist_name}"
    results = sp.search(q=query, type='album', limit=1)
    items = results.get('albums', {}).get('items', [])
    if not items:
        print("–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        sys.exit(1)
    
    album = items[0]
    album_id = album['id']
    print(f"–ù–∞–π–¥–µ–Ω –∞–ª—å–±–æ–º: {album['name']} ({album['release_date']})")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∞–ª—å–±–æ–º–∞
    tracks_data = []
    results = sp.album_tracks(album_id)
    tracks = results.get('items', [])
    
    for track in tracks:
        track_id = track['id']
        track_name = track['name']
        duration_ms = track['duration_ms']
        duration_sec = duration_ms / 1000
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
        track_info = sp.track(track_id)
        popularity = track_info.get('popularity', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —á–µ—Ä–µ–∑ Genius API
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–µ–∫–∞: {track_name}")
        try:
            song = genius.search_song(title=track_name, artist=artist_name)
            lyrics = song.lyrics if song else ""
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {track_name}: {e}")
            lyrics = ""
        
        tracks_data.append({
            "track_name": track_name,
            "duration": duration_sec,
            "popularity": popularity,
            "lyrics": lyrics
        })
    
    df = pd.DataFrame(tracks_data)
    return df

def clean_text(text):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:
      - –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
      - –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      - –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤ (–∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏ —Ä—É—Å—Å–∫–∏—Ö)
    """
    text = text.lower()
    text = re.sub(r'[^a-z–∞-—è—ë\s]', '', text)
    tokens = word_tokenize(text)
    tokens = [token for token in tokens if token not in stopwords.words('english') 
              and token not in stopwords.words('russian')]
    return tokens

üö¨, [15.05.2025 20:51]
def analyze_duration_popularity(df, dashboard_dir):
    """
    –°—Ç—Ä–æ–∏—Ç scatter plot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ dashboard_dir/duration_vs_popularity.png.
    """
    plt.figure(figsize=(8,6))
    sns.scatterplot(data=df, x='duration', y='popularity')
    plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞')
    plt.xlabel('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)')
    plt.ylabel('–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å')
    out_path = os.path.join(dashboard_dir, "duration_vs_popularity.png")
    plt.savefig(out_path)
    plt.close()
    print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}")
    
    corr = df[['duration', 'popularity']].corr()
    print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é:")
    print(corr)

def analyze_lyrics(df, dashboard_dir):
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ø-20 —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö —Å–ª–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ dashboard_dir/top_words.png.
    """
    all_words = []
    for lyrics in df['lyrics']:
        if pd.isnull(lyrics) or lyrics == "":
            continue
        tokens = clean_text(lyrics)
        all_words.extend(tokens)
    
    counter = Counter(all_words)
    top_words = counter.most_common(20)
    
    print("–¢–æ–ø-20 —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤:")
    for word, count in top_words:
        print(f"{word}: {count}")
    
    words, counts = zip(*top_words) if top_words else ([], [])
    plt.figure(figsize=(10,6))
    sns.barplot(x=list(counts), y=list(words), palette="magma")
    plt.title('–¢–æ–ø-20 —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö —Ç—Ä–µ–∫–æ–≤')
    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π')
    plt.ylabel('–°–ª–æ–≤–∞')
    out_path = os.path.join(dashboard_dir, "top_words.png")
    plt.savefig(out_path)
    plt.close()
    print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}")

def create_dashboard_html(dashboard_dir):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π HTML‚Äë–¥—ç—à–±–æ—Ä–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π.
    """
    html_content = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Dashboard: –ê–Ω–∞–ª–∏–∑ –∞–ª—å–±–æ–º–∞ "Goodbye Horses"</title>
</head>
<body>
    <h1>–ê–Ω–∞–ª–∏–∑ –∞–ª—å–±–æ–º–∞ "Goodbye Horses" –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ian</h1>
    <h2>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–æ–≤</h2>
    <img src="duration_vs_popularity.png" alt="Duration vs Popularity" style="width:600px;">
    
    <h2>–¢–æ–ø-20 —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–∞—Ö –ø–µ—Å–µ–Ω</h2>
    <img src="top_words.png" alt="Top Words Chart" style="width:600px;">
</body>
</html>
"""
    html_path = os.path.join(dashboard_dir, "dashboard.html")
    with open(html_path, "w", encoding="utf-8") as f:
        f.write(html_content)
    print(f"–î—ç—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {html_path}")

def main():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ project/scripts/)
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    data_dir = os.path.join(base_dir, "data")
    dashboard_dir = os.path.join(base_dir, "dashboard")
    os.makedirs(data_dir, exist_ok=True)
    os.makedirs(dashboard_dir, exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Spotify –∏ Genius API
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Spotify –∏ Genius API...")
    df = download_album_data(album_name="Goodbye Horses", artist_name="ian")
    data_path = os.path.join(data_dir, "tracks.csv")
    df.to_csv(data_path, index=False)
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {data_path}")
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    analyze_duration_popularity(df, dashboard_dir)
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω
    analyze_lyrics(df, dashboard_dir)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML‚Äë–¥—ç—à–±–æ—Ä–¥–∞
    create_dashboard_html(dashboard_dir)
    
    print("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")

if name == '__main__':
    main()
